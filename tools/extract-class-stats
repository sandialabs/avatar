#!/usr/bin/env perl
###########################################################################
#
#  Name: extract-class-stats		Shell Type: Perl
#
#  Function  :  See Usage message below.
#
#  Rev	     :  0.4	Cleaned up for release in the wake of the
#                       discovery of the bug in the per-fold
#                       statistics calculated by
#                       --output-performance-metrics.
#						3/4/14	Philip Kegelmeyer
#		0.3	Collapsed accuracy and recall
#						4/15/11	Philip Kegelmeyer
#		0.1     First implementation.
#			                	3/25/10	Philip Kegelmeyer
#
###########################################################################
#

use Getopt::Std;                    # For parsing command line
  
# Set up defaults
$usage = 0;                         # No useage message

# Parse the user's flags.
getopts('h');

if ((@ARGV == 0) || $opt_h) { $usage = 1;}     # Needs a usage message?

$Usage_Text = "
Usage: extract-class-stats.pl [-h] file1 file2 ... fileN
  
-h		Print this usage message

This script extracts class-specific statistics from the overall
confusion matrix generated by Avatar's crossvalfc program. 

The initial impetus for this script was that the
--output-performance-metrics argument to crossvalfc generates those
statistics only per-fold, but provided no summary across all folds.
So the point here was to generate class-sensitive performance metrics
for the overall confusion martrix. 

An additional impetus (as of 03/04/2015) is the discovery of an
intermittent bug in the per-fold extraction of statistics by
--output-performance-metrics. The printed per-fold and overall confusion
matrices are correct, but the verbose performance metrics are
sometimes based on a slightly different and apparently hallucinated
version of the correct matrix. 

Note: this program assumes it is operating on one or more files which are a
straight, unedited capture of the standard output of 'crossvalfc',
'avatardt', or 'avatarmpi'.

";	

if ($usage) { print  $Usage_Text; exit 0;}

$cur_file="";

while (<>) {
    chomp;
    if ($cur_file ne $ARGV) {
    # We're processing a new file; do some resets
        $foldnum=-1;
        $postfix="";
        $cur_file = $ARGV;
        print("Statistics from: $ARGV\n\n");
    }
    if (/Overall Confusion Matrix/) {
    # We've come to the final overall confusion matrix:
        $postfix = "overall";
    }
    if (/TRUTH/) {
    # Okay, we found a new confusion matrix to analyze.
    
    # First, update or reset all or the parameters we are using     
        undef %cm; undef %sumtruth; undef %sumpredicted; 
        $sumdiagonal = $sum  = 0;
        $foldnum++;

#        $_=<>; $_=<>; # skip two lines

    # Acquire the labels in the next line
        $_=<>; chomp;
        @labels = split; 
        $numclasses = @labels;
#        print("file is <$ARGV>,line is <$_>,numclasses=$numclasses\n");
#        print @labels, "\n";
        $_=<>; # Skip line
        
    # Acquire confusion matrix in next few lines and 
    # accumulate summary statistics
        foreach $predicted (@labels) {
            $_=<>; chomp;
            @entries = split;
#            print ("class=$predicted, @entries, \n");
            foreach $truth (@labels) {
                $cm{$truth}{$predicted} = splice @entries,0,1;
                $sumtruth{$truth} += $cm{$truth}{$predicted};
                $sumpredicted{$predicted} += $cm{$truth}{$predicted};
                $sum += $cm{$truth}{$predicted};
                if ($truth eq $predicted) {
                    $sumdiagonal += $cm{$truth}{$truth};
                }
            }
        }
        
    # Print original confusion matrix and summary statistics
        print("     TRUTH\n");
        foreach $label (@labels) {
            printf("%10s ",$label);
        }
        printf("\n");
        foreach $label (@labels) {
            printf("---------- ",$label);
        }
        printf("\n");

        foreach $predicted (@labels) {
            foreach $truth (@labels) {
                printf("%10d ", $cm{$truth}{$predicted});
            }
            if ($predicted eq $labels[$numclasses-1]) {
                printf("%10s     PREDICTIONS\n",$predicted);
            } else {
                printf("%10s\n",$predicted);
            }
        }

        print("\n");
#        print("               ");
        printf("%25s","");
        foreach $label (@labels) {
            printf("%10s",$label);
        }
        printf("%10s%10s\n","Class Avg","Average");

        if ($postfix ne "overall") {$postfix = "fold $foldnum"}

    # Compute and print class accuracies
        printf("%25s","Class Accuracy (Recall):");
        $avg=0;
        foreach $label (@labels) {
            printf("%10.3f",$cm{$label}{$label}/$sumtruth{$label});
            $avg += $cm{$label}{$label}/$sumtruth{$label};
        }           
        printf("%10.3f%10.3f%10s\n",$avg/$numclasses,$sumdiagonal/$sum,$postfix);

    # Compute and print precisions
        printf("%25s","Precision:");
        $avg=0;
        foreach $label (@labels) {
            printf("%10.3f",$cm{$label}{$label}/$sumpredicted{$label});
            $avg += $cm{$label}{$label}/$sumpredicted{$label};
        }           
        printf("%10.3f%10s%10s\n",$avg/$numclasses,"------",$postfix);
        print("\n\n");
    }
}
