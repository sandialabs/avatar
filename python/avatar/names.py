import numpy
import re

def load(file):
  """Load an Avatar .names file, returning a sequence of dictionaries describing the name, type, and (optional) allowed values for each column of a .data file."""
  for line in file:
    line = line.strip()
    if line == "" or line[0] == "#":
      continue
    id, type = line.split(":")
    index, name = id.split()
    type = type.split()
    if len(type) > 1:
      values = type[1].split(",")
      type = type[0]
    else:
      values = None
      type = type[0]

    if values is None:
      yield {"name":name, "type":type}
    else:
      yield {"name":name, "type":type, "values":values}

def guess(columns, output, truth=None, exclude=[], discrete_threshold=10):
  """Create an Avatar .names file using the same heuristics as the data_inspector tool.

  The data argument may be a collection of Avatar .data columns, a sequence of column columns, or a string filename.
  The output argument may be an open file object, or a string filename.
  The optional truth argument may be a zero-based column index, a column label, or None.  If None, the last column will be marked as the truth.
  The optional exclude argument must be a sequence of zero-based column indices or column labels to mark as excluded columns.
  The optional discrete_threshold argument must be an integer.
  """

  def formatted(item):
    if isinstance(item, basestring):
      return item.strip()
    return repr(item)

  import avatar.data

  if isinstance(columns, avatar.data.columns):
    data = [columns]
  elif isinstance(columns, basestring):
    row_count, columns = avatar.data.load(open(columns, "r"))
    data = [columns]
  else:
    data = columns

  if isinstance(output, basestring):
    output = open(output, "w")

  lhs = data[0]
  for rhs in data[1:]:
    if len(lhs) != len(rhs):
      raise Exception("Column count mismatch.")
    if [column.label for column in lhs] != [column.label for column in rhs]:
      raise Exception("Column label mismatch.")
    if [column.dtype for column in lhs] != [column.dtype for column in rhs]:
      raise Exception("Column type mismatch.")

  index_width = int(numpy.log10(len(data[0]))) + 1
  label_width = max([len(column.label) for columns in data for column in columns])

  output.write("# Generated by avatar.names.guess()\n\n")
  for index, columns in enumerate(zip(*data)):
    label = columns[0].label
    type = "discrete"
    unique = numpy.unique(numpy.concatenate(columns))
    if issubclass(unique.dtype.type, numpy.character):
      unique = unique[unique != ""]
      try:
        numeric = unique.astype("float64")
        if len(numeric) > discrete_threshold:
          type = "continuous"
      except:
        pass
    if issubclass(unique.dtype.type, numpy.number):
      unique = unique[~numpy.isnan(unique)]
      if len(unique) > discrete_threshold:
        type = "continuous"

    if index in exclude or label in exclude:
      type = "exclude"

    if truth is not None and (index == truth or label == truth):
      type = "class"
    if truth is None and index == len(columns) - 1:
      type = "class"

    output.write("{index:>{index_width}} {label:<{label_width}} : {type} ".format(index=index + 1, label=label, type=type, index_width=index_width, label_width=label_width))
    if type not in ["continuous", "exclude"]:
      output.write(",".join([formatted(item) for item in unique]))
    output.write("\n")
